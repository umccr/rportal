---
title: "`r glue::glue("{params$title} {params$start_date} - )`"
author: "UMCCR - Genomics Platform Group"
date: "`r lubridate::date()`"
output:
  html_document:
    toc: true
params:
  title: "UMCCR PortalDB Workflow Summary"
description: "UMCCR PortalDB Workflow Summary"
---

```{css echo=FALSE}
.main-container {
  max-width: 1400px !important;
  margin-left: auto;
  margin-right: auto;
}
```

```{r knitr_opts, include=F}
knitr::opts_chunk$set(
  collapse = TRUE, echo = FALSE,
  warning = TRUE, message = FALSE
)
```

```{r load_pkgs}
#|
{
  require(assertthat, include.only = "assert_that")
  require(dplyr)
  require(dracarys)
  require(DT, include.only = "datatable")
  require(glue, include.only = "glue")
  require(googledrive, include.only = "drive_find")
  require(googlesheets4, include.only = "read_sheet")
  require(here, include.only = "here")
  require(jsonlite, include.only = "fromJSON")
  require(kableExtra, include.only = "kbl")
  require(lubridate, include.only = "with_tz")
  require(purrr, include.only = "map")
  require(RColorBrewer, include.only = "brewer.pal")
  require(rportal, include.only = "awsvault_profile")
  require(readr, include.only = "cols")
  require(tibble, include.only = "as_tibble")
  require(tidyr, include.only = "unnest")
  require(knitr, include.only = "kable")
  require(vistime, include.only = "vistime")
}
set.seed(4)
```

```{r funcs}
kable_empty_wf <- function(wf) {
  kableExtra::kbl(NULL, caption = glue("<strong>NO {wf} WORKFLOWS WERE RUN</strong>"), escape = FALSE) |>
    kableExtra::kable_minimal(full_width = TRUE, position = "left")
}

dt_view <- function(x, ...) {
  x |>
    dplyr::mutate(across(where(is.character), as.factor)) |>
    DT::datatable(
      filter = list(position = "top", clear = FALSE, plain = TRUE),
      class = "cell-border display compact",
      rownames = FALSE,
      extensions = c("Scroller", "Buttons", "KeyTable"),
      options = list(
        scroller = TRUE, scrollY = 400, scrollX = TRUE,
        autoWidth = FALSE, keys = TRUE,
        buttons = c("csv"), dom = "Blfrtip"
      ),
      escape = FALSE,
      ...
    ) |>
    DT::formatStyle(
      "end_status",
      backgroundColor = DT::styleEqual(levels = c("Succeeded", "Failed"), c("lightgreen", "red"))
    )
}

blank_lines <- function(n = 10) {
  cat(rep("&nbsp;  ", n), sep = "\n")
}

get_colours <- function(nc) {
  clrs <- RColorBrewer::brewer.pal.info |>
    tibble::rownames_to_column(var = "name") |>
    tibble::as_tibble() |>
    dplyr::filter(name %in% c("Set3", "Set2", "Pastel2", "Pastel1")) |>
    dplyr::select(name, maxcolors) |>
    dplyr::arrange(dplyr::desc(name)) |>
    dplyr::rowwise() |>
    dplyr::mutate(
      clrs = list(RColorBrewer::brewer.pal(n = .data$maxcolors, name = .data$name))
    ) |>
    dplyr::ungroup() |>
    tidyr::unnest(clrs) |>
    dplyr::pull(clrs)
  max_col <- length(clrs)
  assertthat::assert_that(nc <= max_col, nc > 0, msg = glue("Number of colours should be a positive number less than {max_col + 1}!"))
  clrs[seq_len(nc)]
}

get_sbj_url <- function(x, colour = NULL, account = "pro") {
  assertthat::assert_that(account %in% c("pro", "stg", "dev"))
  account <- ifelse(account == "pro", "", account)
  sbj_url <- glue("https://portal{account}.umccr.org/subjects/{x}/overview")
  if (!is.null(colour)) {
    return(glue("<a href={sbj_url} style='background-color:{colour}'>{x}</a>"))
  }
  sbj_url <- glue("<a href={sbj_url}>{x}</a>")
  sbj_url
}
add_totals <- function(x) {
  x |>
    dplyr::ungroup() %>%
    dplyr::bind_rows(
      dplyr::summarise(
        ., dplyr::across(dplyr::where(is.numeric), sum),
        dplyr::across(dplyr::where(is.character), ~"Total")
      )
    )
}
```

```{r vars}
# Get metadata for workflows run within the date range
# options(width = 150)
fmt1 <- "%Y-%m-%dT%H:%M:%S"
dstart <- "2024-03-23"
dend <- "2024-03-29"
date_start <- as.POSIXct(glue("{dstart}T00:00:01"), format = fmt1)
date_end <- as.POSIXct(glue("{dend}T23:59:59"), format = fmt1)
wf_order <- c(
  "bcl_convert",
  "tso_ctdna_tumor_only",
  "wgs_alignment_qc",
  "wts_alignment_qc",
  "wts_tumor_only",
  "wgs_tumor_normal",
  "umccrise",
  "rnasum",
  "star_alignment",
  "oncoanalyser_wts",
  "oncoanalyser_wgs",
  "oncoanalyser_wgts_existing_both",
  "sash"
)

invisible(capture.output(rportal::awsvault_profile("upro")))
pmeta_rds <- here(glue("nogit/data_portal/workflows/{as.Date(date_end)}.rds"))
wf_query <- glue('WHERE "start" >= date(\'{dstart}\') AND "start" <= date(\'{dend}\') ORDER BY "start" DESC;')
# pmeta_raw <- rportal::portaldb_query_workflow(wf_query)
# saveRDS(pmeta_raw, file = pmeta_rds)
pmeta_raw <- readr::read_rds(pmeta_rds)
pmeta <- pmeta_raw |>
  dplyr::filter(start >= date_start, is.na(end) | end <= date_end) |>
  dplyr::mutate(type_name = factor(.data$type_name, levels = wf_order))

lims_rds <- here(glue("nogit/data_portal/lims/{as.Date(date_end)}.rds"))
# lims_raw <- dracarys::glims_excel_read() # TODO: use rportal
# saveRDS(lims_raw, file = lims_rds)
lims_raw <- readr::read_rds(lims_rds)

lims <- lims_raw |>
  dplyr::select(
    Timestamp, SubjectID, SampleID, SampleName, LibraryID, ExternalSubjectID, ExternalSampleID,
    ProjectOwner, ProjectName, Type, Assay, Phenotype, Source, Quality, Topup, Workflow
  )
```

## Summary for Workflows Run between `r date_start` AEST and `r date_end` AEST

```{r data_setup}
pmeta_sumy <- pmeta |>
  dplyr::select(
    start, end, wfr_name, type_name, wfr_id, portal_run_id, end_status
  ) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    wfr_name = dplyr::if_else(grepl("umccr__automated", .data$wfr_name),
      glue("{.data$wfr_name}"),
      glue("umccr__automated__{.data$wfr_name}")
    ),
    sbj_lib = sub("umccr__automated__(.*?)__(SBJ.*__L.*)__202.*", "\\2", .data$wfr_name),
    sbjid = sub("(SBJ.*?)__L.*", "\\1", .data$sbj_lib)
  ) |>
  dplyr::ungroup()
unique_sbj <- sort(unique(pmeta_sumy$sbjid))
clrs1 <- get_colours(length(unique_sbj)) |>
  purrr::set_names(unique_sbj) |>
  tibble::enframe(name = "sbjid", value = "color") |>
  dplyr::mutate(sbj_url = get_sbj_url(.data$sbjid, colour = .data$color, account = "pro"))
pmeta_sumy_count <- pmeta_sumy |>
  dplyr::count(type_name, .drop = FALSE) |>
  tibble::deframe()
chunks1 <- as.list(pmeta_sumy_count > 0)
pmeta_status_count <- pmeta_sumy |>
  dplyr::count(type_name, end_status, .drop = FALSE) |>
  add_totals()
```

```{r show_sumy_tbls}
pmeta_status_count |>
  dplyr::mutate(type_name = dplyr::if_else(is.na(.data$type_name), "", .data$type_name)) |>
  kableExtra::kbl(caption = "Workflow Type Count", row.names = TRUE) |>
  kableExtra::kable_classic(full_width = FALSE, position = "float_left") |>
  kableExtra::column_spec(
    3,
    color = ifelse(
      is.na(pmeta_status_count$end_status), "orange", ifelse(
        pmeta_status_count$end_status == "Succeeded", "green",
        ifelse(pmeta_status_count$end_status == "Failed", "red",
          ifelse(pmeta_status_count$end_status == "Aborted", "purple", "black")
        )
      )
    )
  )
sbj_sumy <- pmeta_sumy |>
  dplyr::count(sbjid, name = "n_wf") |>
  dplyr::filter(grepl("SBJ", .data$sbjid)) |>
  dplyr::arrange(desc(sbjid)) |>
  dplyr::left_join(clrs1, by = "sbjid") |>
  dplyr::mutate(rn = dplyr::row_number())
# split into multiple columns based on number of sbjs
group_len <- 10
sbj_sumy$column_group <- rep(
  seq(1, 1 + nrow(sbj_sumy) %/% group_len),
  each = group_len, length.out = nrow(sbj_sumy)
)

x <- sbj_sumy |>
  dplyr::select("rn", "sbj_url", "n_wf", "column_group")
split(x, x$column_group) |>
  purrr::map(\(x) {
    x <- x |> dplyr::select("rn", "sbj_url", "n_wf")
    colnames(x)[1] <- ""
    x
  }) |>
  kableExtra::kbl(caption = "Subjects processed via one or more workflows", row.names = FALSE, escape = FALSE) |>
  kableExtra::kable_classic(full_width = FALSE, position = "left")
```

```{r, results='asis'}
blank_lines()
```

## RuntimeVis

```{r vistime, fig.width=20, fig.height = 24}
p1 <- pmeta_sumy |>
  dplyr::arrange(sbj_lib, type_name) |>
  dplyr::group_by(sbj_lib, type_name) |>
  dplyr::mutate(
    n_type = n(),
    is_dup_type = n_type > 1,
  ) |>
  dplyr::ungroup() |>
  # take care of rnasum re-runs
  dplyr::mutate(sbj_lib = if_else(is_dup_type, paste0(sbj_lib, "_", portal_run_id), sbj_lib)) |>
  dplyr::left_join(clrs1, by = "sbjid") |>
  dplyr::mutate(sbjid = factor(.data$sbjid, levels = clrs1$sbjid))
vistime1 <- p1 |>
  vistime::vistime(
    col.event = "sbj_lib",
    col.group = "type_name",
    col.color = "color",
    show_labels = TRUE,
    optimize_y = FALSE,
    linewidth = 15
  )

# Decrease font size
pp <- plotly::plotly_build(vistime1)
font_size <- 11
# text_pos <- "center"
for (i in seq_along(pp$x$data)) {
  if (pp$x$data[[i]]$mode == "text") {
    pp$x$data[[i]]$textfont$size <- font_size
    # pp$x$data[[i]]$textposition <- text_pos
  }
}
pp
```

## Workflow Metadata {.tabset .tabset-pills}

```{r echo=FALSE}
wf <- "bcl_convert"
```

### 1. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_bcl_convert(status = c("Succeeded", "Running", "Failed", "Aborted")) |>
  dplyr::select(
    portal_run_id, gds_outdir_multiqc, gds_outdir_multiqc_interop,
    end_status, runfolder_name, LibraryID, SampleID, batch_name, start, end
  ) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, portal_run_id, durationMin, runfolder_name, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID,
    ProjectOwner, ProjectName, batch_name, Type, Assay, Source, Quality, Workflow,
    start, end
  ) |>
  dplyr::arrange(portal_run_id, desc(SubjectID), start) |>
  dt_view()
```

```{r}
wf <- "tso_ctdna_tumor_only"
```

### 2. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_tso_ctdna_tumor_only(status = c("Succeeded", "Failed", "Running", "Aborted")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "wgs_alignment_qc"
```

### 3. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_wgs_alignment_qc(status = c("Succeeded", "Failed", "Running", "Aborted")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, Lane, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir_dragen
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "wts_alignment_qc"
```

### 4. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_wts_alignment_qc(status = c("Succeeded", "Failed", "Running")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, Lane, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir_dragen
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "wts_tumor_only"
```

### 5. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_wts_tumor_only(status = c("Succeeded", "Failed", "Running", "Aborted")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID, ProjectOwner, ProjectName,
    Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir_dragen
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "wgs_tumor_normal"
```

### 6. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_wgs_tumor_normal(status = c("Succeeded", "Failed", "Running", "Aborted")) |>
  tidyr::unite("SampleID__LibraryID___normal", SampleID_normal, LibraryID_normal, sep = "__") |>
  tidyr::unite("SampleID__LibraryID___tumor", SampleID_tumor, LibraryID_tumor, sep = "__") |>
  tidyr::pivot_longer(c("SampleID__LibraryID___normal", "SampleID__LibraryID___tumor"), names_to = c(NA, "Phenotype"), names_sep = "___", values_to = "SampleID__LibraryID") |>
  tidyr::separate_wider_delim("SampleID__LibraryID", delim = "__", names = c("SampleID", "LibraryID")) |>
  # include Phenotype to double-check join
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID", "Phenotype")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID, ProjectOwner, ProjectName,
    Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir_dragen_somatic, gds_outdir_dragen_germline
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "umccrise"
```

### 7. `r wf` {.active}

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_umccrise(status = c("Succeeded", "Failed", "Running", "Aborted")) |>
  tidyr::unite("SampleID__LibraryID___normal", SampleID_normal, LibraryID_normal, sep = "__") |>
  tidyr::unite("SampleID__LibraryID___tumor", SampleID_tumor, LibraryID_tumor, sep = "__") |>
  tidyr::pivot_longer(c("SampleID__LibraryID___normal", "SampleID__LibraryID___tumor"), names_to = c(NA, "Phenotype"), names_sep = "___", values_to = "SampleID__LibraryID") |>
  tidyr::separate_wider_delim("SampleID__LibraryID", delim = "__", names = c("SampleID", "LibraryID")) |>
  # include Phenotype to double-check join
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID", "Phenotype")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir_umccrise
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "rnasum"
```

### 8. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_rnasum(status = c("Succeeded", "Failed", "Running", "Aborted")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, rnasum_dataset, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, gds_outdir_rnasum,
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "star_alignment"
```

### 9. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_star_alignment(status = c("Succeeded", "Failed", "Running")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID, ProjectOwner, ProjectName,
    Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, s3_outdir_star
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "oncoanalyser_wts"
```

### 10. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_oncoanalyser_wts(status = c("Succeeded", "Failed", "Running")) |>
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID, ProjectOwner, ProjectName,
    Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, s3_outdir_oncoanalyser
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```


```{r echo=FALSE}
wf <- "oncoanalyser_wgs"
```

### 11. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_oncoanalyser_wgs(status = c("Succeeded", "Failed", "Running")) |>
  tidyr::unite("SampleID__LibraryID___normal", SampleID_normal, LibraryID_normal, sep = "__") |>
  tidyr::unite("SampleID__LibraryID___tumor", SampleID_tumor, LibraryID_tumor, sep = "__") |>
  tidyr::pivot_longer(c("SampleID__LibraryID___normal", "SampleID__LibraryID___tumor"), names_to = c(NA, "Phenotype"), names_sep = "___", values_to = "SampleID__LibraryID") |>
  tidyr::separate_wider_delim("SampleID__LibraryID", delim = "__", names = c("SampleID", "LibraryID")) |>
  # include Phenotype to double-check join
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID", "Phenotype")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, s3_outdir_oncoanalyser
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "oncoanalyser_wgts_existing_both"
```

### 12. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_oncoanalyser_wgts_existing_both(status = c("Succeeded", "Failed", "Running")) |>
  tidyr::unite("SampleID__LibraryID___normal___wgs", SampleID_normal_wgs, LibraryID_normal_wgs, sep = "__") |>
  tidyr::unite("SampleID__LibraryID___tumor___wgs", SampleID_tumor_wgs, LibraryID_tumor_wgs, sep = "__") |>
  tidyr::unite("SampleID__LibraryID___tumor___wts", SampleID_tumor_wts, LibraryID_tumor_wts, sep = "__") |>
  tidyr::pivot_longer(c("SampleID__LibraryID___normal___wgs", "SampleID__LibraryID___tumor___wgs", "SampleID__LibraryID___tumor___wts"), names_to = c(NA, "Phenotype", "WGTS"), names_sep = "___", values_to = "SampleID__LibraryID") |>
  tidyr::separate_wider_delim("SampleID__LibraryID", delim = "__", names = c("SampleID", "LibraryID")) |>
  # include Phenotype to double-check join
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID", "Phenotype")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, WGTS, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, s3_outdir_oncoanalyser
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

```{r echo=FALSE}
wf <- "sash"
```

### 13. `r wf`

```{r}
if (!chunks1[[wf]]) {
  kable_empty_wf(wf)
}
```

```{r eval=chunks1[[wf]]}
pmeta |>
  rportal::meta_sash(status = c("Succeeded", "Failed", "Running")) |>
  tidyr::unite("SampleID__LibraryID___normal", SampleID_normal, LibraryID_normal, sep = "__") |>
  tidyr::unite("SampleID__LibraryID___tumor", SampleID_tumor, LibraryID_tumor, sep = "__") |>
  tidyr::pivot_longer(c("SampleID__LibraryID___normal", "SampleID__LibraryID___tumor"), names_to = c(NA, "Phenotype"), names_sep = "___", values_to = "SampleID__LibraryID") |>
  tidyr::separate_wider_delim("SampleID__LibraryID", delim = "__", names = c("SampleID", "LibraryID")) |>
  # include Phenotype to double-check join
  dplyr::left_join(lims, by = c("LibraryID", "SampleID", "SubjectID", "Phenotype")) |>
  dplyr::left_join(clrs1 |> dplyr::select(sbjid, sbj_url), by = c("SubjectID" = "sbjid")) |>
  dplyr::mutate(
    SubjectID = dplyr::if_else(is.na(.data$sbj_url), get_sbj_url(.data$SubjectID), .data$sbj_url),
    durationMin = round(as.numeric(difftime(end, start, units = "mins")))
  ) |>
  dplyr::select(
    end_status, durationMin, SubjectID, LibraryID, SampleID, Phenotype, ExternalSubjectID,
    ProjectOwner, ProjectName, Type, Assay, Source, Quality, Workflow,
    portal_run_id, wfr_id, start, end, s3_outdir_sash
  ) |>
  dplyr::arrange(desc(SubjectID), start) |>
  dt_view()
```

## Session Info {.tabset .tabset-pills}

```{r}
si <- dracarys:::session_info_tbls(
  pkgs = c("dracarys", "base", "dplyr", "DT", "readr", "purrr", "tidyr", "tibble", "vistime", "kableExtra")
)
si_pkg <- si$si_pkg |>
  kableExtra::kbl(full_width = FALSE, position = "left") |>
  kableExtra::kable_styling(fixed_thead = T)
si_pl <- si$si_pl |>
  kableExtra::kbl(full_width = FALSE, position = "left") |>
  kableExtra::kable_minimal()
```

### Platform

```{r}
si_pl
```

### Packages

```{r}
si_pkg
```
